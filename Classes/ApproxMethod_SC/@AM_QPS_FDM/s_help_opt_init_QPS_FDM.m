% This function is a method of the subclass AM_QPS_FDM.
% It is a help function file for the costarhelp functionality.
%
% This help file is identified by its name.
%
% @help_struct: struct of structs describing the parameters and options for the respective opt_init structure

function help_struct = s_help_opt_init_QPS_FDM()

    help_struct.info = ['opt_init --- quasi-periodic solution --- finite difference method \n\n' ...
                        'There are two possibilities to set the initial value:\n Either c0, c1_matrix and/or s1_matrix OR \n fdm_sol, n_int_1_fdm_sol and/or n_int_2_fdm_sol can be used. \n\n' ...
                        'Nomenclature used in the following: \n' ...
                        ' dim       dimension of the state space of the system \n' ...
                        ' n_int_1   number of intervals in theta_1-direction into which the hyper-time domain is divided \n' ...
                        ' n_int_2   number of intervals in theta_2-direction into which the hyper-time domain is divided \n' ...
                        ' theta_1   2*pi-periodic hyper-time ( theta_1 = mod(omega_1*t, 2*pi) ) \n'...
                        ' theta_2   2*pi-periodic hyper-time ( theta_2 = mod(omega_2*t, 2*pi) ) \n'...
                        '           ( omega_1 and omega_2: angular frequencies,  t: time )'];

    help_struct.mandatory = [];

    help_struct.optional.c0.value   = '[dim x 1] array \n e.g.: [1;0] \n Default: zeros(dim,1)';
    help_struct.optional.c0.text    = 'Possibility 1: The initial values are calculated using a first order multi- dimensional Fourier series. c0 defines the constant Fourier series coefficient.\nThe field fdm_sol is not allowed when providing c0.';

    help_struct.optional.c1_matrix.value   = '[dim x 1], [dim x 2] or \n [dim x 3] array \n e.g.: [1;0], [1,1;0,0] or \n [1,1,1;0,0,0] \n Default: zeros(dim,3)';
    help_struct.optional.c1_matrix.text    = ['Possibility 1: The initial values are calculated using a first order multi- dimensional Fourier series. \n'...
                                              'The first column of c1_matrix defines the coefficient of the cos(theta_1) term. '...
                                              'The second column of c1_matrix defines the coefficient of the cos(theta_2) term. '...
                                              'The third column of c1_matrix defines the coefficient of the cos(theta_1+theta_2) term. '...
                                              'Non-supplied columns are treated as zero vectors.\nThe field fdm_sol is not allowed when providing c1_matrix.'];

    help_struct.optional.s1_matrix.value   = '[dim x 1], [dim x 2] or \n [dim x 3] array \n e.g.: [0;-1], [0,0;-1,-1] or \n [0,0,0;-1,-1,-1] \n Default: zeros(dim,3)';
    help_struct.optional.s1_matrix.text    = ['Possibility 1: The initial values are calculated using a first order multi- dimensional Fourier series. \n'...
                                              'The first column of s1_matrix defines the coefficient of the sin(theta_1) term. '...
                                              'The second column of s1_matrix defines the coefficient of the sin(theta_2) term. '...
                                              'The third column of s1_matrix defines the coefficient of the sin(theta_1+theta_2) term. '...
                                              'Non-supplied columns are treated as zero vectors.\nThe field fdm_sol is not allowed when providing s1_matrix.'];

    help_struct.optional.fdm_sol.value   = '[dim*n_int_1_fdm_sol*...\n ...n_int_2_fdm_sol x 1] array\n e.g.: Solution_object.s \n Default: (no default value)';
    help_struct.optional.fdm_sol.text    = ['Possibility 2: The initial value can be taken from an already calculated solution. fdm_sol takes the method solution vector s (stored in Solution_object.s). \n',...
                                            'If the number of intervals n_int_1 and n_int_2, defined in opt_approx_method (or their default values), do not match the number of intervals of fdm_sol, the provided solution is interpolated. ' ...
                                            'In this case, the number of intervals of fdm_sol must be defined via the fields n_int_1_fdm_sol and/or n_int_2_fdm_sol (see below). \n' ...
                                            'Moreover, the fields c0, c1_matrix and s1_matrix are not allowed when providing fdm_sol.'];

    help_struct.optional.n_int_1_fdm_sol.value  = 'positive integer >= 2 \n e.g.: 25, 50, 100, ... \n Default: n_int_1';
    help_struct.optional.n_int_1_fdm_sol.text   = ['Possibility 2: This field can be used to define the number of intervals n_int_1 of fdm_sol if this number does not match n_int_1 defined in opt_approx_method (or the default value of n_int_1). \n',...
                                                   'Thus, this field is only allowed when using the field fdm_sol.'];

    help_struct.optional.n_int_2_fdm_sol.value  = 'positive integer >= 2 \n e.g.: 25, 50, 100, ... \n Default: n_int_2';
    help_struct.optional.n_int_2_fdm_sol.text   = ['Possibility 2: This field can be used to define the number of intervals n_int_2 of fdm_sol if this number does not match n_int_2 defined in opt_approx_method (or the default value of n_int_2). \n',...
                                                   'Thus, this field is only allowed when using the field fdm_sol.'];

end