%This is the help function file for the costarhelp functionality. 
%
%This help file is identified by its name. 
%
%@help_struct: struct of structs describing the parameters and options for the respective contplot option structure


function help_struct = s_help_solget()


    help_struct.info = 'solget';

    help_struct.mandatory.space.value = '''time'', ''hypertime'', \n or ''frequency''';
    help_struct.mandatory.space.text  = ['Defines the solution space in which the solution is returned.\n' ...
                                         '--> time: Returns solution dependent on time.\n' ...
                                         '--> hypertime: Returns solution as 1D trajectory (periodic solution) or 2D manifold (quasi-periodic solution).\n' ...                  
                                         '--> frequency: Returns frequency content of solution.'];

    help_struct.mandatory.eval.value = '''euclidean'', ''all'' or \n function handle \n e.g.: @(z) z(:,1)';
    help_struct.mandatory.eval.text  = ['Defines the quantity to be returned. \n' ...
                                         '--> ''euclidean'': Returns the euclidean norm of all state variables.\n' ...
                                         '--> ''all'': Returns all state variables.\n' ...
                                         '--> function handle: Dimension of output argument depends on solution type and solution space:\n' ...
                                         '    --- equilibrium + ''hypertime'': 1D array, e.g. @(z) z(1:2).\n' ...
                                         '    --- equilibrium (all other spaces): 2D array, e.g. @(z) z(:,1:2).\n' ...
                                         '    --- periodic (all spaces): 2D array, e.g. @(z) z(:,1:2).\n' ...
                                         '    --- quasi-periodic + ''hypertime'': 3D array, e.g. @(z) z(:,:,1:2).\n' ...
                                         '    --- quasi-periodic (all other spaces): 2D array, e.g. @(z) z(:,1:2).'];

    help_struct.optional.index.value = 'scalar, vector (positive \n integers) or ''all'' \n e.g.: [1:10] \n Default: ''all''';
    help_struct.optional.index.text  = 'Vector of increasing indices of the continuation points to be returned. \n ''all'' returns all computed solutions.';

    help_struct.optional.mu.value = 'scalar, vector (double) \n or ''all'' \n e.g.: [0.5, 1, 2.4] \n Default: ''all''';
    help_struct.optional.mu.text  = ['Defines the values of the continuation parameter mu of the solutions which are returned.\n' ...
                                     'Continuation points matching the given values the closest will be returned.\n' ...
                                     'WARNING: This might lead to ambiguities for overhanging curves. Try using ''index'' instead.\n' ...
                                     '''all'' returns all computed solutions.'];

    help_struct.optional.interval.value = '[1x2] array (non-negativ\n double) e.g.: [0,10]\n Default: [0, 2*pi]';
    help_struct.optional.interval.text  = 'Defines the start and end point of the evaluation time interval. Ignored for ''hypertime'' solution space.';

    help_struct.optional.resolution.value = 'scalar or [1x2] array \n (positive integers) \n e.g.: 100 or [40 50] \n Default: 200';
    help_struct.optional.resolution.text  = ['Defines the resolution / number of points along each of the time or hypertime axis. ' ...
                                             'This determines the discretization of the returned solution and affects the accuracy for the ''frequency'' solution space.\n' ...
                                             '[1x2] array to define individual resolutions for each hypertime axis only available for the ''hypertime'' '...
                                             'solution space of quasi-periodic solutions approximated by finite-differences (scalars are accepted as well)!'];

end