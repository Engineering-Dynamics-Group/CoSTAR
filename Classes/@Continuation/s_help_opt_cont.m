%This is the help function file for the costarhelp functionality. 
%
%This help file is identified by its name. 
%
%@help_struct: struct of structs describing the parameters and options for the respective opt_cont structure


function help_struct = s_help_opt_cont()


    help_struct.info = 'opt_cont';
                                                                                                                       
    help_struct.mandatory.mu_limit.value = '[1x2] double array \n e.g.: [0.1, 5]';
    help_struct.mandatory.mu_limit.text  = 'Defines the minimal and maximal value of the continuation parameter. The continuation ends when a value outside of the specified values is reached.';


    help_struct.optional.max_cont_step.value = 'positive integer \n e.g.: 100 \n Default: 1500';
    help_struct.optional.max_cont_step.text  = 'Defines the maximal number of continuation steps.';

    help_struct.optional.direction.value = '-1 or 1 \n Default: 1';
    help_struct.optional.direction.text  = ['Defines the direction in which the curve is continued at the start of the continuation.\n' ...
                                            '--> 1: continuation parameter mu is increasing.\n' ...
                                            '--> -1: continuation parameter mu is decreasing.'];


    help_struct.optional.pred.value = '''tangent'', ''secant'', \n ''parable'' or ''cubic'' \n Default: ''tangent''';
    help_struct.optional.pred.text  = ['Method for computing the predictor point and direction vector, which is a unit vector from latest solution point to predictor point.\n' ...
                                       '--> ''tangent'': Tangent at latest solution point computed via QR decomposition of Jacobian matrix. More accurate than ''secant'', but numerically costly for huge systems.\n' ...
                                       '--> ''secant'': Secant through the latest two solution points. Less accurate than ''tangent'', but not as numerically costly.\n' ...
                                       '--> ''parable'': Parable through the latest three solution points. Can lead to less corrector iterations, resulting in better performance. Can be problematic when using error control.\n' ...
                                       '--> ''cubic'': Cubic polynom through the latest four solution points. Can lead to less corrector iterations, resulting in better performance. Can be problematic when using error control.'];

   help_struct.optional.subspace.value = '''pseudo-arc'', ''arclength'', \n ''natural'' or ''taxi'' \n Default: ''pseudo-arc''';
   help_struct.optional.subspace.text  = ['Defines the subspace in which the next curve point has to lie. This closes the equation system, since the continuation parameter mu is assumed to be unknown in general. \n ' ...
                                          '--> ''pseudo-arc'': Demands the next curve point to lie at the intersection of the curve and a hyper-plane that is perpendicular to the direction vector. The predictor point lies on the hyper-plane.' ...
                                          '                  Numerically cheap and enables continuation around overganging curves, but can be problematic at very sharp corners. \n'...
                                          '--> ''arclength'': Demands the next curve point to lie at the intersection of the curve and a hyper-sphere around the current curve point. ' ...
                                          '                 Enables continuation around overganging curves and performs well on sharp corner. Numerically more expensive than pseudo-arc. \n' ...
                                          '--> ''natural'': This fixes the continuation parameter value. Does not allow to continue past curve overhangs. Can be beneficial for crude problems. \n' ...
                                          '--> ''taxi'': Demands the next curve point to lie at the intersection of the curve and a hyper-cube (1-norm) around the current curve point.'];

   help_struct.optional.step_control.value = '''on'', ''off'', ''angle'', \n ''combination'', \n ''norm_corrector'', \n ''corrector_iterations'' \n or ''pid'' \n Default: ''angle''';
   help_struct.optional.step_control.text  = ['Defines the algorithm to adapt the step width during the continuation in order to achieve a high resolution in complex curve sections and a low resolution in less complex sections to save numerical cost. \n' ...
                                             '--> ''on'': Turns the step control on and uses the ''angle'' method. \n' ...
                                             '--> ''off'': Turns the step control off. This leads to a constant step width. \n' ...
                                             '--> ''angle'': Tries to maintain a specific angle between the latest two direction vectors. \n' ...
                                             '--> ''combination'': Uses the number of corrector iterations and the angle between the latest two direction vectors. \n' ...
                                             '--> ''norm_corrector'': Tries to maintain the ratio norm(correction-vector) / step_width at a constant value. \n' ...   
                                             '--> ''corrector_iterations'': Tries to achieve a specific number of corrector iterations. \n' ...
                                             '--> ''pid'': Uses PID control to adapt step width (not recommended).'];

    help_struct.optional.step_control_param.value    = '[1x2] or [1x5] double array';
    help_struct.optional.step_control_param.text     = ['Array defining parameters used by the step control. Values depend on the chosen step control method. \n' ...
                                                       'In general: it_nom determines the desired number of corrector iterations and alpha_nom the desired angle in degrees. \n' ...
                                                       '--> ''angle'': [it_nom, alpha_nom] \n' ...
                                                       '    Default: [2, 3] \n' ...
                                                       '--> ''combination'': [it_nom, alpha_nom] \n' ...
                                                       '          Default: [2, 3] \n' ...
                                                       '--> ''norm_corrector'': [it_nom, norm_corr_nom], where norm_corr_nom determines the desired length of the correction vector. \n' ...
                                                       '             Default: [2, 0.0025] \n' ...
                                                       '--> ''corrector_iterations'': [it_nom, alpha_nom] \n' ...
                                                       '                   Default: [3, 3] \n' ...
                                                       '--> ''pid'':  [it_nom, tol, kP, kI, kD] (see method step_control for details). \n ' ...
                                                       '  Default: [2, 0.1, 0.075, 0.175, 0.01]'];

    help_struct.optional.step_width.value = 'positive scalar \n e.g.: 0.5 \n Default: 0.1';
    help_struct.optional.step_width.text  = ['Defines the width or ''length'' from the current curve solution point to the predictor point at the start of the continuation. \n ' ...
                                             'The step width is adapted within step_width_limit if step_control = ''on''. A small step width leads to a high resolution of the curve and higher numerical cost.'];

    help_struct.optional.step_width_limit.value     = '[1x2] double array \n Default: \n initial-step-width.*[0.2, 5]';
    help_struct.optional.step_width_limit.text      = 'If step_control = ''on'', the step width is altered within these limits.';

    help_struct.optional.plot.value                 = '''on'' or ''off'' \n Default: ''on''';
    help_struct.optional.plot.text                  = 'Plots the solution branch during the continuation process. Set to ''off'' to save computation time.';

    help_struct.optional.display.value              = '''off'', ''on'' or \n''step_control_info'' \n Default: ''on''';
    help_struct.optional.display.text               = 'Controls the command window output during continuation.\n --> ''on'': Enables the default output.\n --> ''step_control_info'': Displays the default output plus additional step control information.';

end